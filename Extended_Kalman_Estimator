function [posEst,oriEst,radiusEst, posVar,oriVar,radiusVar,estState] = Estimator(estState,actuate,sense,tm,knownConst,designPart)
% [posEst,oriEst,posVar,oriVar,baseEst,baseVar,estState] =
% 	Estimator(estState,actuate,sense,tm,knownConst,designPart)
%
% The estimator.
%
% The Estimator function shall be used for both estimator design parts; the
% input argument designPart is used to distinguish the two:
%   designPart==1  -> Part 1
%   designPart==2  -> Part 2
%
% The function will be called in two different modes:
% If tm==0, the estimator is initialized; otherwise the estimator does an
% iteration step (compute estimates for the time step k).
%
% Inputs:
%   estState        previous estimator state (time step k-1)
%                   May be defined by the user (for example as a struct).
%   actuate         control input u(k-1), [1x2]-vector
%                   actuate(1): u_v(k-1), drive wheel angular velocity
%                   actuate(2): u_r(k-1), drive wheel angle
%   sense           sensor measurements z(k), [1x2]-vector, INF if no
%                   measurement
%                   sense(1): z_d(k), distance measurement
%                   sense(2): z_r(k), orientation measurement
%   tm              time, scalar
%                   If tm==0 initialization, otherwise estimator
%                   iteration step.
%   knownConst      known constants (from KnownConstants.m)
%   designPart      variable to distinguish the estimator design part
%                       designPart==1  -> Part 1
%                       designPart==2  -> Part 2
%
% Outputs:
%   posEst          position estimate (time step k), [1x2]-vector
%                   posEst(1): x position estimate
%                   posEst(2): y position estimate
%   oriEst          orientation estimate (time step k), scalar
%   radiusEst       estimate of wheel radius W (time step k), scalar
%   posVar          variance of position estimate (time step k), [1x2]-vector
%                   posVar(1): x position variance
%                   posVar(2): y position variance
%   oriVar          variance of orientation estimate (time step k), scalar
%   radiusVar       variance of wheel radius estimate (time step k), scalar
%   estState        current estimator state (time step k)
%                   Will be input to this function at the next call.
%
%
% Class:
% Recursive Estimation
% Spring 2015
% Programming Exercise 1
%
% --
% ETH Zurich
% Institute for Dynamic Systems and Control
% Raffaello D'Andrea, Michael Muehlebach
% michaemu@ethz.ch
%
% --
% Revision history
% [19.04.11, ST]    first version by Sebastian Trimpe
% [30.04.12, PR]    adapted version for spring 2012, added unknown wheel
%                   radius
% [06.05.13, MH]    2013 version
% [24.04.15, MM]    2015 version


%% Mode 1: Initialization
if (tm == 0)
    % Do the initialization of your estimator here!
    
    % Replace the following:
    posEst = [0 0];
    oriEst = 0;
    posVar = [knownConst.TranslationStartBound.^2/3 knownConst.TranslationStartBound.^2/3];
    oriVar = knownConst.RotationStartBound.^2/3;
    radiusEst = knownConst.NominalWheelRadius;
    radiusVar = knownConst.WheelRadiusError.^2/3;
    estState = [posEst, oriEst, radiusEst;diag([posVar oriVar radiusVar])];
    return;
end


%% Mode 2: Estimator iteration.
% If we get this far tm is not equal to zero, and we are no longer
% initializing.  Run the estimator.
T_s = 0.1;
x_m_old = estState(1,1);
y_m_old = estState(1,2);
r_m_old = estState(1,3);
W_m_old = estState(1,4);
P_m_old = estState(2:5,:);
u_v = actuate(1);
u_r = actuate(2);
B = knownConst.WheelBase;
% Step 1: Prediction step
% mean
x_p_new = x_m_old + (W_m_old * u_v * cos(u_r) * cos(r_m_old)) * T_s;
y_p_new = y_m_old + (W_m_old * u_v * cos(u_r) * sin(r_m_old)) * T_s;
r_p_new = r_m_old + (-sin(u_r) ./ B .* W_m_old .* u_v) * T_s;
W_p_new = W_m_old;
state_p_new = [x_p_new, y_p_new, r_p_new, W_p_new]';
% variance
d_q1_x = 0; d_q1_y = 0; d_q1_r = W_m_old * u_v * cos(u_r) * (-sin(r_m_old)); ...
    d_q1_W = u_v * cos(u_r) * cos(r_m_old);
d_q2_x = 0; d_q2_y = 0; d_q2_r = W_m_old * u_v * cos(u_r) * cos(r_m_old);...
    d_q2_W = u_v * cos(u_r) * sin(r_m_old);
d_q3_x = 0; d_q3_y = 0; d_q3_r = 0; d_q3_W = -sin(u_r) / B * u_v;
d_q4_x = 0; d_q4_y = 0; d_q4_r = 0; d_q4_W = 0;
A = [d_q1_x, d_q1_y, d_q1_r, d_q1_W;...
    d_q2_x, d_q2_y, d_q2_r, d_q2_W;...
    d_q3_x, d_q3_y, d_q3_r, d_q3_W;...
    d_q4_x, d_q4_y, d_q4_r, d_q4_W];
if designPart ==1
%     L = [eye(3); zeros(1,3)];
%     Q = diag([0.5 0.5 0.5]); % assumption for Q
    d_q1_vv = W_m_old * u_v * cos(u_r) * cos(r_m_old); d_q1_vr = W_m_old * u_v * (-sin(u_r)) * cos(r_m_old);
    d_q2_vv = W_m_old * u_v * cos(u_r) * sin(r_m_old); d_q2_vr = W_m_old * u_v * (-sin(u_r)) * sin(r_m_old);
    d_q3_vv = -sin(u_r) / B * W_m_old * u_v; d_q3_vr = -cos(u_r) / B * W_m_old * u_v;
    d_q4_vv = 0; d_q4_vr = 0;
    L = [d_q1_vv, d_q1_vr, 0, 1, 0,0;
        d_q2_vv, d_q2_vr, 1, 0, 0,0;
        d_q3_vv, d_q3_vr, 0, 0, 1,0;
        d_q4_vv, d_q4_vr, 0, 0, 0,1];
    Q = diag([0.001, 0.3, 0.07, 0.07, 0, 0.0001]);
else
    d_q1_vv = W_m_old * u_v * cos(u_r) * cos(r_m_old); d_q1_vr = W_m_old * u_v * (-sin(u_r)) * cos(r_m_old);
    d_q2_vv = W_m_old * u_v * cos(u_r) * sin(r_m_old); d_q2_vr = W_m_old * u_v * (-sin(u_r)) * sin(r_m_old);
    d_q3_vv = -sin(u_r) / B * W_m_old * u_v; d_q3_vr = -cos(u_r) / B * W_m_old * u_v;
    d_q4_vv = 0; d_q4_vr = 0;
    L = [d_q1_vv, d_q1_vr;
        d_q2_vv, d_q2_vr;
        d_q3_vv, d_q3_vr;
        d_q4_vv, d_q4_vr];
    Q = diag([knownConst.VelocityInputPSD, knownConst.AngleInputPSD]);
end
P_p = P_m_old + (A * P_m_old + P_m_old * A' + L * Q * L') .* T_s;

% Step 2: Measurement update step
% meanr
d_h1_x = 0; d_h1_y = 0; d_h1_r = 1; d_h1_W = 0;
d_h2_x = x_p_new/sqrt(x_p_new^2 + y_p_new^2); d_h2_y = y_p_new/sqrt(x_p_new^2 + y_p_new^2);...
    d_h2_r = 0; d_h2_W = 0;
H = [d_h1_x, d_h1_y, d_h1_r, d_h1_W;
    d_h2_x, d_h2_y, d_h2_r, d_h2_W];
M = eye(2);
R = diag([knownConst.CompassNoise, 1/6*(knownConst.DistNoise)^2]);
K = P_p * H' / (H * P_p * H' + M * R * M');
h_k = [r_p_new, sqrt(x_p_new^2 + y_p_new^2)];
sense_r = sense(2);
sense_d = sense(1);
if isinf(sense_r)
    z(1) = h_k(1);
else
    z(1) = sense_r;
end
if isinf(sense_d)
    z(2) = h_k(2);
else
    z(2) = sense_d;
end
state_m_new = state_p_new + K * (z - h_k)';
P_m_new = (eye(4) - K * H) * P_p;
posEst = state_m_new(1:2)';
oriEst = state_m_new(3);
posVar = diag(P_m_new(1:2,1:2))';
oriVar = P_m_new(3,3);
radiusEst = state_m_new(4);
radiusVar = P_m_new(4,4);
estState = [state_m_new';P_m_new];
if any(any(posVar<0))
    keyboard;
end
end
